'use strict';
const Sequelize = require('sequelize');

// local wamp
/*
const dbConf = {
    dialect: "",
    user: "",
    pass: "",
    host: "",
    port: "",
    dbName: "",
};
*/



// dev distant (local distant) with Google Cloud SQL proxy using real instance (DEVELOPEMENT)!
// run the proxy before : ./cloud_sql_proxy -instances=<INSTANCE>=tcp:3306 (INSTANCE => information SQL cloud  dans "se connecter")
// run mysql : E:\wamp64\bin\mysql\mysql5.7.19\bin> ./mysql -u <user_create_in_sql_cloud> -h 127.0.0.1 -p
/*
const dbConf = {
    dialect: "", //mysql
    user: "", // SqlCLOUD  user
    pass: "", // SqlCLOUD pass user
    host: "", // 127.0.0.1
    port: "", // 3306
    dbName: "", // db name from dev instance sql cloud
    dialectOptions: {
    socketPath: "" // cloud instance
    }
};
*/


// distance production DB with Google Cloud SQL proxy using real instance (PRODUCTION)!
/*
const dbConf = {
    dialect: "", //mysql
    user: "", // SqlCLOUD  user
    pass: "", // SqlCLOUD pass user
    host: "", // 127.0.0.1
    port: "", // 3306
    dbName: "", // db name from production instance sql cloud
    dialectOptions: {
    socketPath: "" // cloud instance
    }
};
*/


 // * Uncomment cette connection string pour les tests en local / gcloud proxy
/*
let Db = {
    instance: new Sequelize(`${dbConf.dialect}://${dbConf.user}:${dbConf.pass}@${dbConf.host}:${dbConf.port}/${dbConf.dbName}`)
};
*/


// Uncomment cette configuration avant  chaque deploy (permet la connection Ã  la db de production et ou de developpement)
// INSTANCE GCLOUD DEVELOPEMENT
/*
let Db = {
    instance: new Sequelize(
        "developerjobs", // DB name (SQL Cloud)
        "sylvain", // DB user name (SQL CLOUD)
        "91vigneux", // DB password (SQL Cloud)
        {
            dialect: 'mysql', // dialect (mysql or postgre
            // e.g. host: '/cloudsql/my-awesome-project:us-central1:my-cloud-sql-instance'
            host: '',
            pool: { // if you need pool
                max: 5,
                min: 0,
                acquire: 30000,
                idle: 10000
            },
            dialectOptions: {
                // e.g. socketPath: '/cloudsql/my-awesome-project:us-central1:my-cloud-sql-instance'
                // same as host string above
                socketPath: ''
            },
            logging: false,
            operatorsAliases: false
        }
    )
};
*/

// INSTANCE GCLOUD PRODUCTION
/*
let Db = {
    instance: new Sequelize(
        "developerjobs", // DB name (SQL Cloud)
        "sylvain", // DB user name (SQL CLOUD)
        "91vigneux", // DB password (SQL Cloud)
        {
            dialect: 'mysql', // dialect (mysql or postgre
            // e.g. host: '/cloudsql/my-awesome-project:us-central1:my-cloud-sql-instance'
            host: '',
            pool: { // if you need pool
                max: 5,
                min: 0,
                acquire: 30000,
                idle: 10000
            },
            dialectOptions: {
                // e.g. socketPath: '/cloudsql/my-awesome-project:us-central1:my-cloud-sql-instance'
                // same as host string above
                socketPath: ''
            },
            logging: false,
            operatorsAliases: false
        }
    )
};
*/


export default Db;
